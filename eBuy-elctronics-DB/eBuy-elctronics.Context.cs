//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace eBuy_elctronics_DB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Brand> Brands { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<FeedbackDesc> FeedbackDescs { get; set; }
        public DbSet<Inventory> Inventories { get; set; }
        public DbSet<InventoryAudit> InventoryAudits { get; set; }
        public DbSet<Item> Items { get; set; }
        public DbSet<ItemOrder> ItemOrders { get; set; }
        public DbSet<Loginaudit> Loginaudits { get; set; }
        public DbSet<Logindetail> Logindetails { get; set; }
        public DbSet<Loginprofile> Loginprofiles { get; set; }
        public DbSet<Query> Queries { get; set; }
        public DbSet<Questionbase> Questionbases { get; set; }
        public DbSet<Solution> Solutions { get; set; }
        public DbSet<TotalOrder> TotalOrders { get; set; }
        public DbSet<Cart> Carts { get; set; }
        public DbSet<CraditCard> CraditCards { get; set; }
    
        public virtual int sp_SaveItems(Nullable<int> brandId, Nullable<int> categoryId, string itemName, string itemDesc, string itemImageURL, Nullable<int> itemPrice, Nullable<int> itemQuantity, Nullable<int> createdBy, Nullable<int> itemsId)
        {
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var itemDescParameter = itemDesc != null ?
                new ObjectParameter("ItemDesc", itemDesc) :
                new ObjectParameter("ItemDesc", typeof(string));
    
            var itemImageURLParameter = itemImageURL != null ?
                new ObjectParameter("ItemImageURL", itemImageURL) :
                new ObjectParameter("ItemImageURL", typeof(string));
    
            var itemPriceParameter = itemPrice.HasValue ?
                new ObjectParameter("ItemPrice", itemPrice) :
                new ObjectParameter("ItemPrice", typeof(int));
    
            var itemQuantityParameter = itemQuantity.HasValue ?
                new ObjectParameter("ItemQuantity", itemQuantity) :
                new ObjectParameter("ItemQuantity", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var itemsIdParameter = itemsId.HasValue ?
                new ObjectParameter("ItemsId", itemsId) :
                new ObjectParameter("ItemsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SaveItems", brandIdParameter, categoryIdParameter, itemNameParameter, itemDescParameter, itemImageURLParameter, itemPriceParameter, itemQuantityParameter, createdByParameter, itemsIdParameter);
        }
    
        public virtual int sp_SaveRegstration(string firstname, string lastname, string birthdate, string hno, string street, string city, string state, string country, string pincode, string contactNo, string email, string loginname, string password, string squestionid, string sanswer)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("Firstname", firstname) :
                new ObjectParameter("Firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            var birthdateParameter = birthdate != null ?
                new ObjectParameter("Birthdate", birthdate) :
                new ObjectParameter("Birthdate", typeof(string));
    
            var hnoParameter = hno != null ?
                new ObjectParameter("Hno", hno) :
                new ObjectParameter("Hno", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var pincodeParameter = pincode != null ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var loginnameParameter = loginname != null ?
                new ObjectParameter("Loginname", loginname) :
                new ObjectParameter("Loginname", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var squestionidParameter = squestionid != null ?
                new ObjectParameter("Squestionid", squestionid) :
                new ObjectParameter("Squestionid", typeof(string));
    
            var sanswerParameter = sanswer != null ?
                new ObjectParameter("Sanswer", sanswer) :
                new ObjectParameter("Sanswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SaveRegstration", firstnameParameter, lastnameParameter, birthdateParameter, hnoParameter, streetParameter, cityParameter, stateParameter, countryParameter, pincodeParameter, contactNoParameter, emailParameter, loginnameParameter, passwordParameter, squestionidParameter, sanswerParameter);
        }
    
        public virtual ObjectResult<cGet_AllCart> sp_Get_AllCart(Nullable<int> loginId)
        {
            var loginIdParameter = loginId.HasValue ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cGet_AllCart>("sp_Get_AllCart", loginIdParameter);
        }
    
        public virtual ObjectResult<cGet_AllOrders> sp_Get_AllOrders(Nullable<int> loginID)
        {
            var loginIDParameter = loginID.HasValue ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cGet_AllOrders>("sp_Get_AllOrders", loginIDParameter);
        }
    
        public virtual int sp_SaveCart(Nullable<int> itemOrder, Nullable<int> quantity, Nullable<int> price, Nullable<int> loginId)
        {
            var itemOrderParameter = itemOrder.HasValue ?
                new ObjectParameter("ItemOrder", itemOrder) :
                new ObjectParameter("ItemOrder", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(int));
    
            var loginIdParameter = loginId.HasValue ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SaveCart", itemOrderParameter, quantityParameter, priceParameter, loginIdParameter);
        }
    
        public virtual int sp_Save_Orders(Nullable<int> orderItemId, Nullable<int> orderQuantity, Nullable<int> loginId, string type, string ccNumber, string cName, Nullable<int> cvv, string exp, string street, string cityID, string stateID, string countryID, Nullable<int> zipcode)
        {
            var orderItemIdParameter = orderItemId.HasValue ?
                new ObjectParameter("OrderItemId", orderItemId) :
                new ObjectParameter("OrderItemId", typeof(int));
    
            var orderQuantityParameter = orderQuantity.HasValue ?
                new ObjectParameter("OrderQuantity", orderQuantity) :
                new ObjectParameter("OrderQuantity", typeof(int));
    
            var loginIdParameter = loginId.HasValue ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var ccNumberParameter = ccNumber != null ?
                new ObjectParameter("CcNumber", ccNumber) :
                new ObjectParameter("CcNumber", typeof(string));
    
            var cNameParameter = cName != null ?
                new ObjectParameter("CName", cName) :
                new ObjectParameter("CName", typeof(string));
    
            var cvvParameter = cvv.HasValue ?
                new ObjectParameter("Cvv", cvv) :
                new ObjectParameter("Cvv", typeof(int));
    
            var expParameter = exp != null ?
                new ObjectParameter("Exp", exp) :
                new ObjectParameter("Exp", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var cityIDParameter = cityID != null ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(string));
    
            var stateIDParameter = stateID != null ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(string));
    
            var countryIDParameter = countryID != null ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(string));
    
            var zipcodeParameter = zipcode.HasValue ?
                new ObjectParameter("Zipcode", zipcode) :
                new ObjectParameter("Zipcode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Save_Orders", orderItemIdParameter, orderQuantityParameter, loginIdParameter, typeParameter, ccNumberParameter, cNameParameter, cvvParameter, expParameter, streetParameter, cityIDParameter, stateIDParameter, countryIDParameter, zipcodeParameter);
        }
    
        public virtual ObjectResult<cGet_Items> sp_Get_Items()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cGet_Items>("sp_Get_Items");
        }
    
        public virtual ObjectResult<cGet_AllFeedback> sp_Get_AllFeedback(Nullable<int> loginId)
        {
            var loginIdParameter = loginId.HasValue ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cGet_AllFeedback>("sp_Get_AllFeedback", loginIdParameter);
        }
    }
}
